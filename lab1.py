# -*- coding: utf-8 -*-
"""lab1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZaO_e-AozeCkVF6n-nlEW8tK4LfbWnau
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

#Амплитуды
A_sin = 1.2
A_meandr = 1.4
A_saw = 1.6
#Частота
F = 1

#1
start = -50
stop = 50
step = 1
y = np.arange(start, stop, step)
x = y

sig_sin = A_sin * np.sin(y)
plt.plot(x, sig_sin)
plt.xlabel('Время, сек.')
plt.ylabel('Амплитуда сигнала')
plt.title('Синусоида')
plt.grid(True)
plt.show()

sig_meandr = A_meandr * signal.square(y)
plt.plot(x, sig_meandr)
plt.xlabel('Время, сек.')
plt.ylabel('Амплитуда сигнала')
plt.title('Меандр')
plt.grid(True)
plt.show()

sig_saw = A_saw * signal.sawtooth(y)
plt.plot(x, sig_saw)
plt.xlabel('Время, сек.')
plt.ylabel('Амплитуда сигнала')
plt.title('Пилообразный сигнал')
plt.grid(True)
plt.show()

sig_spec_sin = np.abs(np.fft.fft(sig_sin))
freqs = np.fft.fftfreq(sig_sin.size, F/2)
plt.plot(freqs, sig_spec_sin)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр синусоидального сигнала')
plt.grid(True)
plt.show()

sig_spec_meandr = np.abs(np.fft.fft(sig_meandr))
freqs = np.fft.fftfreq(sig_meandr.size, F/2)
plt.plot(freqs, sig_spec_meandr)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр меандра')
plt.grid(True)
plt.show()

sig_spec_saw = np.abs(np.fft.fft(sig_saw))
freqs = np.fft.fftfreq(sig_saw.size, F/2)
plt.plot(freqs, sig_spec_saw)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр пилообразного сигнала')
plt.grid(True)
plt.show()

sig_sin_after_relay = np.sign(sig_sin)
plt.plot(x, sig_sin_after_relay)
plt.title('Идеальное реле для синусоидального сигнала')
plt.grid(True)
plt.show()

def dead_zone_scalar(x, width = 0.5):
    if np.abs(x) < width:
        return 0
    elif x > 0:
        return x - width
    else:
        return x + width
dead_zone = np.vectorize(dead_zone_scalar, otypes=[np.float])
sig_sin_after_dead_zone = dead_zone(sig_sin)
plt.plot(x, sig_sin_after_dead_zone)
plt.title('Мертвая зона для синусоидального сигнала')
plt.grid(True)
plt.show()

def saturation_scalar(x, hight = 0.5):
    if np.abs(x) < hight:
        return x
    elif x > 0:
        return hight
    else:
        return -hight
saturation = np.vectorize(saturation_scalar, otypes=[np.float])
sig_sin_after_saturation = saturation(sig_sin)
plt.plot(x, sig_sin_after_saturation)
plt.title('Усилитель с насыщением для синусоидального сигнала')
plt.grid(True)
plt.show()

sig_meandr_after_relay = np.sign(sig_meandr)
plt.plot(x, sig_meandr_after_relay)
plt.title('Идеальное реле для меандра')
plt.grid(True)
plt.show()

def dead_zone_scalar(x, width = 0.5):
    if np.abs(x) < width:
        return 0
    elif x > 0:
        return x - width
    else:
        return x + width
dead_zone = np.vectorize(dead_zone_scalar, otypes=[np.float])
sig_meandr_after_dead_zone = dead_zone(sig_meandr)
plt.plot(x, sig_meandr_after_dead_zone)
plt.title('Мертвая зона для меандра')
plt.grid(True)
plt.show()

def saturation_scalar(x, hight = 0.5):
    if np.abs(x) < hight:
        return x
    elif x > 0:
        return hight
    else:
        return -hight
saturation = np.vectorize(saturation_scalar, otypes=[np.float])
sig_meandr_after_saturation = saturation(sig_meandr)
plt.plot(x, sig_meandr_after_saturation)
plt.title('Усилитель с насыщением для меандра')
plt.grid(True)
plt.show()

sig_saw_after_relay = np.sign(sig_saw)
plt.plot(x, sig_saw_after_relay)
plt.title('Идеальное реле для пилообразного сигнала')
plt.grid(True)
plt.show()

def dead_zone_scalar(x, width = 0.5):
    if np.abs(x) < width:
        return 0
    elif x > 0:
        return x - width
    else:
        return x + width
dead_zone = np.vectorize(dead_zone_scalar, otypes=[np.float])
sig_saw_after_dead_zone = dead_zone(sig_saw)
plt.plot(x, sig_saw_after_dead_zone)
plt.title('Мертвая зона для пилообразного сигнала')
plt.grid(True)
plt.show()

def saturation_scalar(x, hight = 0.5):
    if np.abs(x) < hight:
        return x
    elif x > 0:
        return hight
    else:
        return -hight
saturation = np.vectorize(saturation_scalar, otypes=[np.float])
sig_saw_after_saturation = saturation(sig_saw)
plt.plot(x, sig_saw_after_saturation)
plt.title('Усилитель с насыщением для пилообразного сигнала')
plt.grid(True)
plt.show()

sig_spec_sin_after_relay = np.abs(np.fft.fft(sig_sin_after_relay))
freqs = np.fft.fftfreq(sig_sin_after_relay.size, F/2)
plt.plot(freqs, sig_spec_sin_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр синусоидального сигнала после идеального реле')
plt.grid(True)
plt.show()

sig_spec_sin_after_dead_zone = np.abs(np.fft.fft(sig_sin_after_dead_zone))
freqs = np.fft.fftfreq(sig_sin_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_sin_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр синусоидального сигнала после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_sin_after_saturation = np.abs(np.fft.fft(sig_sin_after_saturation))
freqs = np.fft.fftfreq(sig_sin_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_sin_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр синусоидального сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

sig_spec_meandr_after_relay = np.abs(np.fft.fft(sig_meandr_after_relay))
freqs = np.fft.fftfreq(sig_meandr_after_relay.size, F/2)
plt.plot(freqs, sig_spec_meandr_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр меандра после идеального реле')
plt.grid(True)
plt.show()

sig_spec_meandr_after_dead_zone = np.abs(np.fft.fft(sig_meandr_after_dead_zone))
freqs = np.fft.fftfreq(sig_meandr_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_meandr_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр меандра после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_meandr_after_saturation = np.abs(np.fft.fft(sig_meandr_after_saturation))
freqs = np.fft.fftfreq(sig_meandr_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_meandr_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр меандра после усилителя с насыщением')
plt.grid(True)
plt.show()

sig_spec_saw_after_relay = np.abs(np.fft.fft(sig_saw_after_relay))
freqs = np.fft.fftfreq(sig_saw_after_relay.size, F/2)
plt.plot(freqs, sig_spec_saw_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр пилообразного сигнала после идеального реле')
plt.grid(True)
plt.show()

sig_spec_saw_after_dead_zone = np.abs(np.fft.fft(sig_saw_after_dead_zone))
freqs = np.fft.fftfreq(sig_saw_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_saw_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр пилообразного сигнала после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_saw_after_saturation = np.abs(np.fft.fft(sig_saw_after_saturation))
freqs = np.fft.fftfreq(sig_saw_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_saw_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Спектр пилообразного сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

k = 1
T = 1
B = [k / (1 + T/0.01)]
A = [1, -1/(1 + 0.01/T)]

filtered_sig_sin_after_relay = signal.lfilter(B, A, np.sign(sig_sin_after_relay))
plt.plot(x, filtered_sig_sin_after_relay)
plt.title('Фильтр синусоидального сигнала после идеального реле')
plt.grid(True)
plt.show()

filtered_sig_sin_after_dead_zone = signal.lfilter(B, A, np.sign(sig_sin_after_dead_zone))
plt.plot(x, filtered_sig_sin_after_dead_zone)
plt.title('Фильтр синусоидального сигнала после мертвой зоны')
plt.grid(True)
plt.show()

filtered_sig_sin_after_saturation = signal.lfilter(B, A, np.sign(sig_sin_after_saturation))
plt.plot(x, filtered_sig_sin_after_saturation)
plt.title('Фильтр синусоидального сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

filtered_sig_meandr_after_relay = signal.lfilter(B, A, np.sign(sig_meandr_after_relay))
plt.plot(x, filtered_sig_meandr_after_relay)
plt.title('Фильтр меандра после идеального реле')
plt.grid(True)
plt.show()

filtered_sig_meandr_after_dead_zone = signal.lfilter(B, A, np.sign(sig_meandr_after_dead_zone))
plt.plot(x, filtered_sig_meandr_after_dead_zone)
plt.title('Фильтр меандра после мертвой зоны')
plt.grid(True)
plt.show()

filtered_sig_meandr_after_saturation = signal.lfilter(B, A, np.sign(sig_meandr_after_saturation))
plt.plot(x, filtered_sig_meandr_after_saturation)
plt.title('Фильтр меандра после усилителя с насыщением')
plt.grid(True)
plt.show()

filtered_sig_saw_after_relay = signal.lfilter(B, A, np.sign(sig_saw_after_relay))
plt.plot(x, filtered_sig_saw_after_relay)
plt.title('Фильтр пилообразного сигнала после идеального реле')
plt.grid(True)
plt.show()

filtered_sig_saw_after_dead_zone = signal.lfilter(B, A, np.sign(sig_saw_after_dead_zone))
plt.plot(x, filtered_sig_saw_after_dead_zone)
plt.title('Фильтр пилообразного сигнала после мертвой зоны')
plt.grid(True)
plt.show()

filtered_sig_saw_after_saturation = signal.lfilter(B, A, np.sign(sig_saw_after_saturation))
plt.plot(x, filtered_sig_saw_after_saturation)
plt.title('Фильтр пилообразного сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_sin_after_relay = np.abs(np.fft.fft(filtered_sig_sin_after_relay))
freqs = np.fft.fftfreq(filtered_sig_sin_after_relay.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_sin_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра синусоидального сигнала после идеального реле')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_sin_after_dead_zone = np.abs(np.fft.fft(filtered_sig_sin_after_dead_zone))
freqs = np.fft.fftfreq(filtered_sig_sin_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_sin_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра синусоидального сигнала после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_sin_after_saturation = np.abs(np.fft.fft(filtered_sig_sin_after_saturation))
freqs = np.fft.fftfreq(filtered_sig_sin_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_sin_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра синусоидального сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_meandr_after_relay = np.abs(np.fft.fft(filtered_sig_meandr_after_relay))
freqs = np.fft.fftfreq(filtered_sig_meandr_after_relay.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_meandr_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра меандра после идеального реле')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_meandr_after_dead_zone = np.abs(np.fft.fft(filtered_sig_meandr_after_dead_zone))
freqs = np.fft.fftfreq(filtered_sig_meandr_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_meandr_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра меандра после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_meandr_after_saturation = np.abs(np.fft.fft(filtered_sig_meandr_after_saturation))
freqs = np.fft.fftfreq(filtered_sig_meandr_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_meandr_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра меандра после усилителя с насыщением')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_saw_after_relay = np.abs(np.fft.fft(filtered_sig_saw_after_relay))
freqs = np.fft.fftfreq(filtered_sig_saw_after_relay.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_saw_after_relay)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра пилообразного сигнала после идеального реле')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_saw_after_dead_zone = np.abs(np.fft.fft(filtered_sig_saw_after_dead_zone))
freqs = np.fft.fftfreq(filtered_sig_saw_after_dead_zone.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_saw_after_dead_zone)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра пилообразного сигнала после мертвой зоны')
plt.grid(True)
plt.show()

sig_spec_filtered_sig_saw_after_saturation = np.abs(np.fft.fft(filtered_sig_saw_after_saturation))
freqs = np.fft.fftfreq(filtered_sig_saw_after_saturation.size, F/2)
plt.plot(freqs, sig_spec_filtered_sig_saw_after_saturation)
plt.xlabel('Частота, Гц')
plt.ylabel('Амплитуда сигнала')
plt.title('Фильтр спектра пилообразного сигнала после усилителя с насыщением')
plt.grid(True)
plt.show()

"""<p><img alt="Colaboratory logo" height="45px" src="/img/colab_favicon.ico" align="left" hspace="10px" vspace="0px"></p>

<h1>What is Colaboratory?</h1>

Colaboratory, or "Colab" for short, allows you to write and execute Python in your browser, with
- Zero configuration required
- Free access to GPUs
- Easy sharing

Whether you're a **student**, a **data scientist** or an **AI researcher**, Colab can make your work easier. Watch [Introduction to Colab](https://www.youtube.com/watch?v=inN8seMm7UI) to learn more, or just get started below!

## **Getting started**

The document you are reading is not a static web page, but an interactive environment called a **Colab notebook** that lets you write and execute code.

For example, here is a **code cell** with a short Python script that computes a value, stores it in a variable, and prints the result:
"""

seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

"""To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut "Command/Ctrl+Enter". To edit the code, just click the cell and start editing.

Variables that you define in one cell can later be used in other cells:
"""

seconds_in_a_week = 7 * seconds_in_a_day
seconds_in_a_week

"""Colab notebooks allow you to combine **executable code** and **rich text** in a single document, along with **images**, **HTML**, **LaTeX** and more. When you create your own Colab notebooks, they are stored in your Google Drive account. You can easily share your Colab notebooks with co-workers or friends, allowing them to comment on your notebooks or even edit them. To learn more, see [Overview of Colab](/notebooks/basic_features_overview.ipynb). To create a new Colab notebook you can use the File menu above, or use the following link: [create a new Colab notebook](http://colab.research.google.com#create=true).

Colab notebooks are Jupyter notebooks that are hosted by Colab. To learn more about the Jupyter project, see [jupyter.org](https://www.jupyter.org).

## Data science

With Colab you can harness the full power of popular Python libraries to analyze and visualize data. The code cell below uses **numpy** to generate some random data, and uses **matplotlib** to visualize it. To edit the code, just click the cell and start editing.
"""

import numpy as np
from matplotlib import pyplot as plt

ys = 200 + np.random.randn(100)
x = [x for x in range(len(ys))]

plt.plot(x, ys, '-')
plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)

plt.title("Sample Visualization")
plt.show()